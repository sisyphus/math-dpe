## This file generated by InlineX::C2XS (version 0.24) using Inline::C (version 0.73)
package Math::DPE;
use warnings;
use strict;

require Exporter;
*import = \&Exporter::import;
require DynaLoader;

our $VERSION = '0.01';
$VERSION = eval $VERSION;
DynaLoader::bootstrap Math::DPE $VERSION;

    use overload

    '+'    => \&_overload_add,
    '-'    => \&_overload_sub,
    '*'    => \&_overload_mul,
    '/'    => \&_overload_div,
    '>'    => \&_overload_gt,
    '>='   => \&_overload_gte,
    '<'    => \&_overload_lt,
    '<='   => \&_overload_lte,
    '=='   => \&_overload_equiv,
    '!='   => \&_overload_not_equiv,
    '""'   => \&_overload_string,
    '<=>'  => \&_overload_spaceship,
    'sqrt' => \&_overload_sqrt;

#    '++'   => \&overload_inc,
#    '--'   => \&overload_dec,
#    '+='   => \&overload_add_eq,
#    '-='   => \&overload_sub_eq,
#    '*='   => \&overload_mul_eq,
#    '/='   => \&overload_div_eq,
#   '!'    => \&overload_not,
#   'bool' => \&overload_true,
#   '='    => \&overload_copy,
#   'abs'  => \&overload_abs,
#   '**'   => \&overload_pow,
#   '**='  => \&overload_pow_eq,
#   'atan2'=> \&overload_atan2,
#   'cos'  => \&overload_cos,
#   'sin'  => \&overload_sin,
#   'log'  => \&overload_log,
#   'exp'  => \&overload_exp,
#   'int'  => \&overload_int,

@Math::DPE::EXPORT = ();
@Math::DPE::EXPORT_OK = qw(
    DPE_EXP DPE_MANT DPE_SIGN
    dpe_init dpe_nan_p dpe_inf_p dpe_set dpe_neg dpe_abs dpe_normalize
    dpe_set_ui dpe_set_ui dpe_set_si dpe_set_d dpe_set_ld dpe_get_si dpe_get_ui
    dpe_get_d dpe_get_d dpe_get_ld dpe_set_z dpe_get_z dpe_get_z_exp dpe_add
    dpe_sub dpe_sub dpe_mul dpe_div dpe_sqrt dpe_mul_ui dpe_mul_2exp
    dpe_div_2exp pe_div_2exp dpe_div_ui dpe_get_si_exp dpe_out_str dpe_inp_str
    dpe_dump dpe_dump dpe_zero_p dpe_cmp dpe_cmp_d dpe_cmp_ui dpe_cmp_si
    dpe_round dpe_round dpe_frac dpe_floor dpe_ceil dpe_swap

    dpe_get_str dpe_str_prec dpe_set_NV dpe_set_UV dpe_set_IV
    );

%Math::DPE::EXPORT_TAGS = (all => [qw(
    DPE_EXP DPE_MANT DPE_SIGN
    dpe_init dpe_nan_p dpe_inf_p dpe_set dpe_neg dpe_abs dpe_normalize
    dpe_set_ui dpe_set_ui dpe_set_si dpe_set_d dpe_set_ld dpe_get_si dpe_get_ui
    dpe_get_d dpe_get_d dpe_get_ld dpe_set_z dpe_get_z dpe_get_z_exp dpe_add
    dpe_sub dpe_sub dpe_mul dpe_div dpe_sqrt dpe_mul_ui dpe_mul_2exp
    dpe_div_2exp dpe_div_2exp dpe_div_ui dpe_get_si_exp dpe_out_str dpe_inp_str
    dpe_dump dpe_dump dpe_zero_p dpe_cmp dpe_cmp_d dpe_cmp_ui dpe_cmp_si
    dpe_round dpe_round dpe_frac dpe_floor dpe_ceil dpe_swap

    dpe_get_str dpe_str_prec dpe_set_NV dpe_set_UV dpe_set_IV
    )]);

sub dl_load_flags {0} # Prevent DynaLoader from complaining and croaking

sub new {
    return dpe_init() unless @_;

    if(@_ > 2) {die "Too many arguments supplied to new()"}

    if(!ref($_[0]) && $_[0] eq "Math::DPE") {
      shift;
      if(!@_) {return dpe_init()}
    }

    if(@_ > 1) {die "Too many arguments supplied to new() - expected no more than one"}

    my $arg = shift;
    my $type = _itsa($arg);
    my $ret = dpe_init();

   if($type == 1) {
     dpe_set_UV($ret, $arg);
     return $ret;
   }

   if($type == 2) {
     dpe_set_IV($ret, $arg);
     return $ret;
   }

   if($type == 3) {
     dpe_set_NV($ret, $arg);
     return $ret;
   }

   if($type == 8 || $type == 9) {
     dpe_set_z($ret, $arg);
     return $ret;
   }

   die die "Inappropriate argument supplied to new()";
}

sub _overload_string {
   return dpe_get_str($_[0]);
}

1;
